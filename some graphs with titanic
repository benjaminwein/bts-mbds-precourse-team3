f=open('D:\\Users\\Asus\\Desktop\\titanic\\train.csv')
Sniffer = csv.Sniffer()
dialect = Sniffer.sniff(f.read(2048))
print(dialect)
f.seek(0)
reader = csv.reader(f,dialect)
Pclass=[]
Name=[]
Survived=[]
for row in reader:
    Pclass.append(row[2])
    Name.append(row[3])
    Survived.append(row[1])
        

print(Pclass)
print(Name)



conda install pandas
pip install pandas
conda install matplotlib
----------------------------------------------------------------------------------------------------------------------
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
%matplotlib inline
import seaborn as sns



df = pd.read_csv('D:\\Users\\Asus\\Desktop\\titanic\\train.csv', index_col=0, skipinitialspace=True)



df.head()



sns.pairplot(df,hue='Sex',palette='coolwarm')



sns.distplot(df['Fare'],kde=True)



sns.barplot(x='Sex',y='Survived',data=df,estimator=np.std)



sns.countplot(x='Sex',data=df)



sns.boxplot(x='Sex',y='Age',data=df,hue='Pclass')



sns.boxplot(x='Sex',y='Age',data=df, hue='Survived')



sns.violinplot(x='Survived',y='Age',data=df,hue='Sex',split=True)



sns.stripplot(x='Survived',y='Age',data=df,jitter=True,hue='Sex',dodge=True)



sns.violinplot(x='Sex',y='Age',data=df,hue='Survived',split=True)
sns.swarmplot(x='Sex',y='Age',data=df,hue='Survived',color='red')



sns.catplot(x='Sex',y='Age',data=df,kind='bar')



g=sns.FacetGrid(data=df,col='Sex',row='Survived')
g.map(sns.distplot,'Age')



sns.lmplot(x='Age',y='Fare',data=df,hue='Sex',markers=['o','v'],scatter_kws={'s':50})



sns.catplot(x='Pclass',y='Fare',data=df,kind='bar')
sns.catplot(x='Pclass',y='Survived',data=df,kind='bar')






sns.countplot(df['Pclass'], hue=df['Survived'])
Survived_p1 = df.Survived[df['Pclass'] == 1].value_counts()
Survived_p2 = df.Survived[df['Pclass'] == 2].value_counts()
Survived_p3 = df.Survived[df['Pclass'] == 3].value_counts()
df2=pd.DataFrame({'p1':Survived_p1, 'p2':Survived_p2, 'p3':Survived_p3})
df2.plot(kind='bar', stacked=True)
plt.title("survived by pclass")
plt.xlabel("pclass") 
plt.ylabel("count")
plt.show()






titanic_df = df.drop(['Name','Ticket'], axis=1)
# Embarked
# only in titanic_df, fill the two missing values with the most occurred value, which is "S".
titanic_df["Embarked"] = titanic_df["Embarked"].fillna("S")
# plot
sns.catplot('Embarked','Survived', data=titanic_df,height=4,aspect=3)
fig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(15,5))
# sns.factorplot('Embarked',data=titanic_df,kind='count',order=['S','C','Q'],ax=axis1)
# sns.factorplot('Survived',hue="Embarked",data=titanic_df,kind='count',order=[1,0],ax=axis2)
sns.countplot(x='Embarked', data=titanic_df, ax=axis1)
sns.countplot(x='Survived', hue="Embarked", data=titanic_df, order=[1,0], ax=axis2)
# group by embarked, and get the mean for survived passengers for each value in Embarked
embark_perc = titanic_df[["Embarked", "Survived"]].groupby(['Embarked'],as_index=False).mean()
sns.barplot(x='Embarked', y='Survived', data=embark_perc,order=['S','C','Q'],ax=axis3)
# Either to consider Embarked column in predictions,
# and remove "S" dummy variable, 
# and leave "C" & "Q", since they seem to have a good rate for Survival.

# OR, don't create dummy variables for Embarked column, just drop it, 
# because logically, Embarked doesn't seem to be useful in prediction.

embark_dummies_titanic  = pd.get_dummies(titanic_df['Embarked'])
embark_dummies_titanic.drop(['S'], axis=1, inplace=True)


titanic_df = titanic_df.join(embark_dummies_titanic)


titanic_df.drop(['Embarked'], axis=1,inplace=True)




